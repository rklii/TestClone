@*
    // ***	 ** ****** ****** ****** ******* **     ** ****** ***   ** **** ****
    // ****  ** **  ** **  ** **  **  **  **  **   **  **  ** ****  ** *    *
    // ** ** ** **  ** ****** ******  **  **   ** **   ****** ** ** ** *    ***
    // **  **** **  ** **	  **  **  **  **    ***    **  ** **  **** *    *
    // **   *** ****** **	  **  ** *******     *     **  ** **   *** **** ****
    //
    // **************************************************************************
    // *                                                                		*
	// *           Admin Layout Changer Plugin by NopAdvance team               *
    // *			Copyright (c) NopAdvance LLP. All Rights Reserved			*
    // *                                                                       	*
    // **************************************************************************
    // *                                                                       	*
    // * Email:		contact@nopadvance.com										*
    // * Website:	https://nopadvance.com										*
    // *                                                                       	*
    // **************************************************************************
    // *                                                                       	*
    // * Please see the  License file for the full End User License Agreement. 	*
    // * The  complete license agreement is also available on  our  website at 	*
    // * https://nopadvance.com/license-terms									*
    // *                                                                       	*
    // * This  software / plugin  is furnished  under a license  and  may   be  *
    // * used  and modified  only in accordance with the terms of such license  *
    // * and with the inclusion of the above copyright notice.  This  software	*
    // * or any other copies thereof may not be  provided  or  otherwise  made	*
    // * available  to any other person.  No title to  and  ownership  of  the  *
    // * software is hereby transferred.                                        *
    // *                                                                       	*
    // * You may not reverse  engineer, decompile, defeat  license  encryption 	*
    // * mechanisms  or  disassemble this software product or software product 	*
    // * license.  NopAdvance may terminate this  license if you don't  comply 	*
    // * with any of the terms & conditions set forth in our  end user license	*
    // * agreement (EULA).  In such event , licensee agrees to return licensor	*
    // * or destroy  all copies of software  upon termination  of the license.	*
    // *                                                                       	*
    // **************************************************************************
*@
@inject IWebHelper webHelper
@inject IDateTimeHelper dateTimeHelper
@inject IPermissionService permissionService
@inject ICustomerService customerService
@inject IEventPublisher eventPublisher
@inject LocalizationSettings localizationSettings
@inject StoreInformationSettings storeInformationSettings
@inject Nop.Services.Localization.ILanguageService languageService
@inject INopFileProvider fileProvider;
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment WebHostEnvironment
@inject IUserAgentHelper userAgentHelper
@inject IPictureService pictureService
@using System.Globalization
@using Nop.Core.Domain
@using Nop.Core.Domain.Localization
@using Nop.Services.Customers
@using Nop.Services.Helpers
@using Nop.Services.Security
@using Nop.Web.Framework.UI
@using Nop.Services.Media
@using NopAdvance.Plugin.Misc.AdminLayoutChanger.Domain;
@using NopAdvance.Plugin.Core.Domain;

@{
    var returnUrl = webHelper.GetRawUrl(Context.Request);

    //page title
    string adminPageTitle = !string.IsNullOrWhiteSpace(ViewBag.PageTitle) ? ViewBag.PageTitle + " / " : "";
    adminPageTitle += T("Admin.PageTitle").Text;

    //has "Manage Maintenance" permission?
    var canManageMaintenance = await permissionService.AuthorizeAsync(StandardPermissionProvider.ManageMaintenance);

    //avatar
    var currentCustomer = await workContext.GetCurrentCustomerAsync();

    //event
    await eventPublisher.PublishAsync(new PageRenderingEvent(NopHtml));

    //info: we specify "Admin" area for actions and widgets here for cases when we use this layout in a plugin that is running in a different area than "admin"

    var currentRoleId = await pluginSettingsHelper.GetCustomerRoleIdAsync();
    var settings = await settingService.LoadSettingAsync<NopAdvanceAdminLayoutChangerSettings>();
    var pluginStatus = LicenceHelper.GetPluginStatus(PluginLicence.LicenceType, settings.PluginInfo);

    var adminLayoutChangerSettings = await settingService.LoadSettingAsync<NopAdvanceAdminLayoutChangerSettings>(currentRoleId);
    bool published = adminLayoutChangerSettings.Published;
    //if current role setting is not published then default setting will be applied
    if (currentRoleId > 0 && !adminLayoutChangerSettings.Published)
    {
        adminLayoutChangerSettings = await settingService.LoadSettingAsync<NopAdvanceAdminLayoutChangerSettings>();
        //all role is not pulished
        if (adminLayoutChangerSettings.Published)
            published = adminLayoutChangerSettings.Published;
    }

    var customSkinName = string.Empty;
    if ((pluginStatus == PluginLicenceStatusType.Registered || pluginStatus == PluginLicenceStatusType.Trial)
        && adminLayoutChangerSettings.AdminThemeTypeId == (int)AdminThemeType.CustomTheme
        && published)
    {
        if(currentRoleId > 0)
        {
            var path = fileProvider.MapPath($"{FilePathDefaults.ADMIN_LTE_CUSTOM_CSS_PREFIX}{currentRoleId}.css");
            if (fileProvider.FileExists(path))
            {
                NopHtml.AppendCssFileParts("~/lib/adminLTE/css/skins/skin-custom-" + currentRoleId + ".css");
                customSkinName = "custom-" + currentRoleId;
            }
            else
            {
                path = fileProvider.MapPath(FilePathDefaults.ADMIN_LTE_CUSTOM_CSS);
                if (fileProvider.FileExists(path))
                {
                    NopHtml.AppendCssFileParts("~/lib/adminLTE/css/skins/skin-custom.css");
                    customSkinName = "custom";
                }
            }
        }
        else
        {
            NopHtml.AppendCssFileParts("~/lib/adminLTE/css/skins/skin-custom.css");
            customSkinName = "custom";
        }
    }

    bool useHorizontalMenu = false;
    if ((pluginStatus == PluginLicenceStatusType.Registered || pluginStatus == PluginLicenceStatusType.Trial))
        useHorizontalMenu = adminLayoutChangerSettings.UseResponsiveMenu && !userAgentHelper.IsMobileDevice();

    bool isAdminMiniLogoEnable = false;
    string adminMiniLogoUrl = "";
    bool isAdminLargeLogoEnable = false;
    string adminLargeLogoUrl = "";
    string adminTheme = string.Empty;
    bool leftLabelPosition = ((LabelPosition)adminLayoutChangerSettings.LabelPositionId == LabelPosition.Left);
    if (published)
    {
        adminTheme = ((AdminTheme)adminLayoutChangerSettings.AdminThemeId).ToString();
        var result = string.Empty;
        for (int i = 0; i < adminTheme.Length; i++)
        {
            var c = adminTheme[i];
            if (i > 0 && c.ToString() != c.ToString().ToLower())
            {
                result += "-" + c.ToString();
            }
            else
            {
                result += c.ToString();
            }
        }
        adminTheme = result.ToLower();

        if (adminLayoutChangerSettings.AdminMiniLogoId > 0)
        {
            isAdminMiniLogoEnable = true;
            adminMiniLogoUrl = await pictureService.GetPictureUrlAsync(adminLayoutChangerSettings.AdminMiniLogoId, 50, true);
            adminMiniLogoUrl = $"{adminMiniLogoUrl}";
        }
        else if (currentRoleId > 0 && settings.AdminMiniLogoId > 0)
        {
            isAdminMiniLogoEnable = true;
            adminMiniLogoUrl = await pictureService.GetPictureUrlAsync(settings.AdminMiniLogoId, 50, true);
            adminMiniLogoUrl = $"{adminMiniLogoUrl}";
        }
        if (adminLayoutChangerSettings.AdminLargeLogoId > 0)
        {
            isAdminLargeLogoEnable = true;
            adminLargeLogoUrl = await pictureService.GetPictureUrlAsync(adminLayoutChangerSettings.AdminLargeLogoId, showDefaultPicture: true);
            adminLargeLogoUrl = $"{adminLargeLogoUrl}";
        }
        else if (currentRoleId > 0 && settings.AdminMiniLogoId > 0)
        {
            isAdminLargeLogoEnable = true;
            adminLargeLogoUrl = await pictureService.GetPictureUrlAsync(settings.AdminLargeLogoId, showDefaultPicture: true);
            adminLargeLogoUrl = $"{adminLargeLogoUrl}";
        }

        if (!string.IsNullOrEmpty(customSkinName))
        {
            adminTheme = customSkinName;
        }
    }
    else
    {
        adminTheme = AdminTheme.Dark.ToString().ToLower();
    }
}
<!DOCTYPE html>
<html lang="@CultureInfo.CurrentUICulture.TwoLetterISOLanguageName" dir="@Html.GetUIDirection(localizationSettings.IgnoreRtlPropertyForAdminArea)">
<head>
    <title>@adminPageTitle</title>
    <meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">
    @NopHtml.GenerateHeadCustom()

    @* CSS & Script resources *@
    @{
        await Html.RenderPartialAsync("~/Plugins/NopAdvance.Plugin.AdminLayoutChanger/Views/Admin/Shared/_AdminScripts.cshtml");
    }

    @*Insert favicon and app icons head code*@
    @await Component.InvokeAsync("Favicon")
</head>
<body class="hold-transition sidebar-mini layout-fixed control-sidebar-slide-open skin-@adminTheme sidebar-mini @(useHorizontalMenu ? " horizontally-menu" : "" ) @(leftLabelPosition ? " left-label-position" : "")">

    <div class="throbber">
        <div class="curtain">
        </div>
        <div class="curtain-content">
            <div>
                <h1 class="throbber-header">@T("Common.Wait")</h1>
                <p>
                    <img src="@Url.Content("~/css/admin/images/throbber-synchronizing.gif")" alt="" />
                </p>
            </div>
        </div>
    </div>
    <div id="ajaxBusy">
        <span>&nbsp;</span>
    </div>
    <div class="wrapper">
        @if (IsSectionDefined("header"))
        {
            @RenderSection("header")
        }
        else
        {
            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.HeaderBefore })
            <nav class="main-header navbar navbar-expand-md navbar-dark bg-dark">
                <ul class="navbar-nav pl-2 pl-md-0">
                    @if (!useHorizontalMenu)
                    {
                        <li class="nav-item">
                            <a class="nav-link" id="nopSideBarPusher" data-widget="pushmenu" href="#"><i class="fa fa-bars"></i></a>
                        </li>
                    }
                    @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.HeaderToggleAfter })
                </ul>
                <a href="@Url.Content("~/Admin")" class="brand-link navbar-dark">
                    <img src="@(isAdminMiniLogoEnable ? adminMiniLogoUrl : "/css/admin/images/logo-mini.png")" alt="logo.png" class="brand-image logo d-block d-md-none d-sm-block d-sm-none">
                </a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.HeaderNavbarBefore })
                <div class="collapse navbar-collapse" id="navbarText">
                    @if (useHorizontalMenu)
                    {
                        <a href="@Url.Content("~/Admin")" class="brand-link navbar-dark">
                            <img src="@(isAdminLargeLogoEnable ? adminLargeLogoUrl : "/css/admin/images/logo.png")" alt="logo.png" class="brand-image logo">
                        </a>
                    }
                    <ul class="navbar-nav ml-auto pl-2">
                        <li class="nav-item">
                            @await Component.InvokeAsync("AdminLanguageSelector")
                        </li>
                        @if (await customerService.IsRegisteredAsync(currentCustomer))
                        {
                            <li class="nav-item">
                                <a href="#" class="nav-link disabled">@await customerService.GetCustomerFullNameAsync(currentCustomer)</a>
                            </li>
                            <li class="nav-item">
                                <a asp-controller="Customer" asp-action="Logout" asp-area="" class="nav-link">@T("Admin.Header.Logout")</a>
                            </li>
                        }
                        <li class="nav-item">
                            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.HeaderMiddle })
                        </li>
                        <li class="nav-item">
                            <a asp-controller="Home" asp-action="Index" asp-area="" class="nav-link">@T("Admin.Header.PublicStore")</a>
                        </li>
                        @if (canManageMaintenance)
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link" href="#" data-toggle="dropdown">
                                    <i class="fas fa-cogs"></i>
                                </a>
                                <ul class="maintenance-menu dropdown-menu dropdown-menu-right" role="menu">
                                    <li class="dropdown-item">
                                        <form asp-controller="Common" asp-action="ClearCache" asp-area="@AreaNames.Admin">
                                            <input name="returnurl" type="hidden" value="@returnUrl">
                                            <div class="input-group-append">
                                                <button type="submit" style="width:210px;background-color: Transparent;">
                                                    <span>@T("Admin.Header.ClearCache")</span>
                                                </button>
                                            </div>
                                        </form>
                                    </li>
                                    <li class="dropdown-item">
                                        <form asp-controller="Common" asp-action="RestartApplication" asp-area="@AreaNames.Admin">
                                            <input name="returnurl" type="hidden" value="@returnUrl">
                                            <button id="restart-application" type="submit" style="width:210px;background-color: Transparent;">
                                                <span>@T("Admin.Header.RestartApplication")</span>
                                            </button>
                                            <script>
                                                $(document).ready(function () {
                                                    $("#restart-application").click(function (e) {
                                                        showThrobber('@Html.Raw(JavaScriptEncoder.Default.Encode(T("Admin.Header.RestartApplication.Progress").Text))');
                                                    });
                                                });
                                            </script>
                                        </form>
                                    </li>
                                </ul>
                            </li>
                        }
                    </ul>
                </div>
                @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.HeaderNavbarAfter })
            </nav>
            @if (useHorizontalMenu)
            {
                <div class="navbar navbar-static-top menu-custom" role="navigation">
                    <div class="navbar-collapse" id="navbar-collapse">
                        @await Html.PartialAsync("Menu")
                    </div>
                </div>
            }
            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.HeaderAfter })
        }
        @if (IsSectionDefined("headermenu"))
        {
            @RenderSection("headermenu")
        }
        else
        {
            <aside class="main-sidebar sidebar-dark-primary elevation-4">
                <!-- Brand Logo -->
            <a href="@Url.Content("~/Admin")" class="brand-link navbar-dark logo-switch">
                    <img src="@(isAdminLargeLogoEnable ? adminLargeLogoUrl : "/css/admin/images/logo.png")" alt="logo.png" class="brand-image-xl logo-xl">
                    <img src="@(isAdminMiniLogoEnable ? adminMiniLogoUrl : "/css/admin/images/logo-mini.png")" alt="logo.png" class="brand-image-xs logo-xs">
                </a>
                @if (!useHorizontalMenu)
                {
                    <div class="sidebar">
                        <div class="sidebar-form">
                        <div id="search-box">
                            <input type="text" class="form-control admin-search-box typeahead" placeholder="@T("Admin.Menu.Search")">
                        </div>
                    </div>
                    <nav class="mt-2">
                        @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.SearchBoxBefore })
                        <script>
                            $(document).ready(function () {
                                Admin.Search.init();
                            });
                        </script>
                        @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.MenuBefore })
                        @await Html.PartialAsync("Menu")

                    </nav>
                </div>
                }
            </aside>
        }
        <div class="content-wrapper">
            @await Html.PartialAsync("Notifications")
            <nop-antiforgery-token />
            @RenderBody()
        </div>
        <div class="main-footer">
            <div class="container-fluid">
                <div class="col-md-12">
                    <div class="row">

                        @if ((pluginStatus == PluginLicenceStatusType.Registered || pluginStatus == PluginLicenceStatusType.Trial) 
                            && adminLayoutChangerSettings.HidePoweredByNopCommerce)
                        {
                            <div class="col-md-4 col-xs-12"></div>
                        }
                        else
                        {
                            <div class="col-md-4 col-xs-12 text-md-left text-center">
                                @*Would you like to remove the "Powered by nopCommerce" link in the bottom of the footer?
                                    Please find more info at https://www.nopcommerce.com/nopcommerce-copyright-removal-key*@
                                Powered by <a href="@(OfficialSite.Main + Utm.OnAdminFooter)" target="_blank">nopCommerce</a>
                            </div>
                        }

                        <div class="col-md-4 col-xs-12 text-center">
                            @((await dateTimeHelper.ConvertToUserTimeAsync(DateTime.Now)).ToString("f", CultureInfo.CurrentCulture))
                        </div>
                        <div class="col-md-4 col-xs-12 text-md-right text-center">
                            <b>nopCommerce version @NopVersion.FULL_VERSION</b>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        var AdminLTEOptions = {
            boxWidgetOptions: {
                boxWidgetIcons: {
                    collapse: 'fa-minus',
                    open: 'fa-plus'
                }
            }
        };
    </script>
    @{
        //scroll to a selected card (if specified)
        var selectedCardName = Html.GetSelectedCardName();
        if (!String.IsNullOrEmpty(selectedCardName))
        {
            <script>
                location.hash = '#@(selectedCardName)';
            </script>
        }
    }
    <a id="backTop" class="btn btn-back-top bg-teal"></a>
    <script>
        $(document).ready(function () {
            //enable "back top" arrow
            $('#backTop').backTop();

            //enable tooltips
            $('[data-toggle="tooltip"]').tooltip({ placement: 'bottom' });
        });
    </script>

    @NopHtml.GenerateScripts(ResourceLocation.Footer)
    @NopHtml.GenerateInlineScripts(ResourceLocation.Footer)
</body>
</html>
