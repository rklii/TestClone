@model HeaderLinksModel
@using Nop.Core.Domain.Customers
@inject Nop.Core.IWebHelper webHelper



<div id="topbar-menu" class="topbar-menu">

    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })


    <ul class="extras-menu">
        <li class="menu-item-wishlist">
            <a ref="@Url.RouteUrl("Wishlist")" class="icon-wishlist-contents">
                <span class="lnr lnr-heart"></span>
            </a>
            <span class="mini-item-counter mini-item-counter--wishlist mf-background-primary">
                @T("Wishlist.HeaderQuantity", Model.WishlistItems)
            </span>
        </li>




        @if (Model.ShoppingCartEnabled)
        {
            <li class="menu-item-cart">
                <a href="@Url.RouteUrl("ShoppingCart")" class="icon-cart-contents">
                    <span class="lnr lnr-cart"></span>
                </a>
                <span class="mini-item-counter mf-background-primary">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                <div class="cart-dropdown-wrap">
                    @await Component.InvokeAsync("FlyoutShoppingCart")
                   
                </div>
            </li>

        }


        @if (!Model.IsAuthenticated)
        {

            var returnUrl = webHelper.GetRawUrl(Context.Request);
            var returnUrlRegister = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
            ? url.ToString()
            : webHelper.GetRawUrl(Context.Request);

            <li class="menu-item-account">
                <a href="#" class="menu-item-account">
                    <span class="lnr lnr-user"></span>
                </a>
                <div class="item-account">
                    <a href="@Url.RouteUrl("Login", new { returnUrl })" class="item-login">
                        <span class="login-text">@T("Account.Login")</span>
                    </a>
                    <a href="@Url.RouteUrl("Register", new { returnUrlRegister })" class="item-register">
                        <span class="register-text">@T("Account.Register")</span>
                    </a>
                </div>
            </li>
        }
        else
        {
            <li>
                <a href="@Url.RouteUrl("CustomerInfo")" class="ico-account btn btn-login">
                    <i class="fa fa-user"></i>
                    <span>@Model.CustomerName</span>
                </a>
            </li>
        }




        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })

        @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
        {
            //new private message notification
            <script asp-location="Footer">
                $(document).ready(function () {
                    displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
                });
            </script>
        }



        @if (Model.IsAuthenticated)
        {
            <li>
                @if (Model.AllowPrivateMessages)
                {

                    <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="btn btn-login">
                        <i class="fa fa-envelope"></i>
                        <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                        <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                    </a>

                }
                <a href="@Url.RouteUrl("Logout")" class="btn btn-account"><i class="fa fa-gear"></i> <span>@T("Account.Logout")</span></a>
            </li>
        }
    </ul>


</div>


