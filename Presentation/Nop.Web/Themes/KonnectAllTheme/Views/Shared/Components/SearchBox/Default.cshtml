@model SearchBoxModel
<form asp-route="ProductSearch" method="get" class="products-search" id="small-search-box-form">
    @if (Model.ShowSearchBox)
    {
        <div class="psearch-content">
            <div class="product-cat">
                <div class="product-cat-label">All</div>
                <select name="product-cat" id="" class="product-cat-dd">
                    <option value="0" selected="selected">All</option>
                    <option class="level-0" value="clothing-apparel">Clothing &amp; Apparel</option>
                    <option class="level-1" value="accessories-clothing-apparel">&nbsp;&nbsp;&nbsp;Accessories</option>
                </select>
            </div>
            <div class="search-wrapper">
                <input type="text" class="search-field" id="small-searchterms" autocomplete="off" placeholder="@T("Search.SearchBox.Tooltip")" name="q" aria-label="@T("Search.SearchBox.Text.Label")" />
            </div>
            <div class="search-btn">
                <a class="submit-btn" href="#">search</a>
            </div>
        </div>


      
        <div class="form-group" style="display:none">

            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.SearchBoxBeforeSearchButton, additionalData = Model })
           
            @if (Model.SearchTermMinimumLength > 0)
            {
                <script type="text/javascript" asp-location="Footer">
                    $("#small-search-box-form").on("submit", function (event) {
                        if ($("#small-searchterms").val() == "") {
                            alert('@Html.Raw(JavaScriptEncoder.Default.Encode(T("Search.EnterSearchTerms").Text))');
                            $("#small-searchterms").focus();
                            event.preventDefault();
                        }
                    });
                </script>
            }
            @if (Model.AutoCompleteEnabled)
            {
                <text>
                    <script asp-location="Footer">
                        $(document).ready(function () {
                            var showLinkToResultSearch;
                            var searchText;
                            $('#small-searchterms').autocomplete({
                                delay: 500,
                                minLength: @(Model.SearchTermMinimumLength.ToString()),
                                source: '@(Url.RouteUrl("ProductSearchAutoComplete"))',
                                appendTo: '.search-box',
                                select: function (event, ui) {
                                    $("#small-searchterms").val(ui.item.label);
                                    setLocation(ui.item.producturl);
                                    return false;
                                },
                                //append link to the end of list
                                open: function (event, ui) {
                                    //display link to search page
                                    if (showLinkToResultSearch) {
                                        searchText = document.getElementById("small-searchterms").value;
                                        $(".ui-autocomplete").append("<li class=\"ui-menu-item\" role=\"presentation\"><a href=\"/search?q=" + searchText + "\">@T("Search.SearchBox.SearchPageLink")</a></li>");
                                    }
                                }
                            })
                                .data("ui-autocomplete")._renderItem = function (ul, item) {
                                    var t = item.label;
                                    showLinkToResultSearch = item.showlinktoresultsearch;
                                    t = htmlEncode(t);
                                    return $("<li></li>")
                                        .data("item.autocomplete", item)
                                        .append("<a>@(Model.ShowProductImagesInSearchAutoComplete ? Html.Raw("<img src='\" + item.productpictureurl + \"'>") : null)" + "<span>" + t + "</span>" + "</a>")
                                        .appendTo(ul);
                                };
                        });
                    </script>
                </text>
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.SearchBox, additionalData = Model })
        </div>
    }
</form>
