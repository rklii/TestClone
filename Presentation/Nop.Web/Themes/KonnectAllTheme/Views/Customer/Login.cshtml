@model LoginModel
@using Nop.Core
@using Nop.Core.Domain.Customers
@inject IWebHelper webHelper
@{
    Layout = "_Root";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register", new { returnUrl = this.Context.Request.Query["returnUrl"] }, webHelper.GetCurrentRequestProtocol());
}
@section HomePageSlider{
    <div class="slider">
        <img alt="" src="../assets/img/banner/auction-banner.png" class="slid-img">
        <div class="overly"></div>
        <div class="container">
            <div class="container content-slid">
                <h1 class="text-left text-capitalize">seasonal vegetable auction</h1>
                <a class="btn btn-primary text-uppercase text-black" href="#"><span>shop now</span></a>
            </div>
        </div>
    </div>
}
<div class="page login-page">
    @await Html.PartialAsync("_ExternalAuthentication.Errors")
    <div class="container second-section">
        <div class="row account">

            <div class="col-sm-6 col-md-6">
                <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" autocomplete="off">
                    <div class="login-sec">
                        <h5 class="text-capitalize  text-left">@T("Account.Login.ReturningCustomer")</h5>
                        <div asp-validation-summary="ModelOnly" class="message-error  alert alert-danger">@T("Account.Login.Unsuccessful")</div>
                        @if (Model.UsernamesEnabled)
                        {
                            <input asp-for="Username" class="username form-control" autofocus="autofocus" />
                            <span asp-validation-for="Username"></span>
                        }
                        else
                        {
                            <input asp-for="Email" class="email form-control" autofocus="autofocus" />
                            <span asp-validation-for="Email"></span>
                        }
                        <input asp-for="Password" class="password form-control" />
                        <span asp-validation-for="Password"></span>

                        <div class="link-sec">
                            <div class="remember">
                                <div class="toggle">
                                    <input asp-for="RememberMe" type="checkbox" />
                                    <label asp-for="RememberMe"></label>
                                </div>
                            </div>
                            <a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>

                            @if (Model.DisplayCaptcha)
                            {
                                <div class="captcha-box col-md-12">
                                    <nop-captcha />
                                </div>
                            }


                        </div>
                        <button class="btn-login" type="submit">@T("Account.Login.LoginButton")</button>
                    </div>


                </form>
            </div>

            @if (Model.RegistrationType == UserRegistrationType.Disabled)
            {

                <div class="col-sm-6 col-md-6">
                    <fieldset>
                        <legend>@T("Account.Register")</legend>
                        <div class="text">
                            @T("Account.Register.Result.Disabled")
                        </div>
                    </fieldset>
                </div>
            }
            else if (Model.CheckoutAsGuest)
            {
                <div class="col-sm-6 col-md-6">
                    <fieldset>
                        <legend>@T("Account.Login.CheckoutAsGuestOrRegister")</legend>
                        <div class="text">
                            @await Component.InvokeAsync("TopicBlock", new { systemName = "CheckoutAsGuestOrRegister" })
                            <div class="buttons col-md-8 pull-right">
                                <div class="register-checkoutbtn-wrapper">
                                    <button type="button" class="btn btn-primary" onclick="location.href='@Url.RouteUrl("Checkout")'">@T("Account.Login.CheckoutAsGuest")</button>
                                    <button type="button" class="btn btn-primary" onclick="location.href='@registerUrl'">@T("Account.Register")</button>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                </div>
            }
            else
            {
                <div class="col-sm-6 col-md-6">
                    <fieldset>
                        <legend>@T("Account.Login.NewCustomer")</legend>
                        <div class="row field">

                            <div class="col-md-12">
                                @T("Account.Login.NewCustomerText")
                                <label class="control-label"></label>

                            </div>
                            <div class="col-md-12">
                                <div class="controls">
                                    <button type="button" class="btn btn-primary pull-right" onclick="location.href='@registerUrl'">@T("Account.Register")</button>
                                </div>
                            </div>

                        </div>
                    </fieldset>
                </div>
            }

        </div>
        <div class="row field">
            <div class="external-authentication col-sm-12 col-md-12">
                @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
            </div>
        </div>

    </div>
</div>

